cmake_minimum_required(VERSION 3.30)

function(search_programs)
		if(NOT CCACHE_PROGRAM_EXE)
				OPTION(USE_CCACHE "Use ccache if available" ON)
				if(USE_CCACHE)
						FIND_PROGRAM(CCACHE_PROGRAM_EXE NAMES ccache)
						SET(CCACHE_PROGRAM_EXE "${CCACHE_PROGRAM_EXE}" CACHE STRING "Path to ccache program")
				else()
						SET(CCACHE_PROGRAM_EXE "" CACHE STRING "Path to ccache program")
				endif()
		endif()

		if(NOT SETUP_LINKER_EXE)
			OPTION(USE_MOLD_LINKER "Use custom linker if available" ON)
				if(USE_MOLD_LINKER)
						FIND_PROGRAM(SETUP_LINKER_EXE NAMES mold lld)
						SET(SETUP_LINKER_EXE "${SETUP_LINKER_EXE}" CACHE STRING "Path to linker")
				else()
						SET(SETUP_LINKER_EXE "" CACHE STRING "Path to linker")
				endif()
		endif()

		if(NOT LLVM_AR_EXE)
			OPTION(USE_LLVM_AR "Use llvm-ar if available" ON)
				if(USE_LLVM_AR)
						FIND_PROGRAM(LLVM_AR_EXE NAMES llvm-ar)
						SET(LLVM_AR_EXE "${LLVM_AR_EXE}" CACHE STRING "Path to llvm-ar")
				else()
						SET(LLVM_AR_EXE "" CACHE STRING "Path to llvm-ar")
				endif()
		endif()

		IF(NOT LLVM_RANLIB_EXE)
			OPTION(USE_LLVM_RANLIB "Use llvm-ranlib if available" ON)
				if(USE_LLVM_RANLIB)
						FIND_PROGRAM(LLVM_RANLIB_EXE NAMES llvm-ranlib)
						SET(LLVM_RANLIB_EXE "${LLVM_RANLIB_EXE}" CACHE STRING "Path to llvm-ranlib")
				else()
						SET(LLVM_RANLIB_EXE "" CACHE STRING "Path to llvm-ranlib")
				endif()
		ENDIF()
endfunction()

function(setup_programs)
		search_programs()

		if(CCACHE_PROGRAM_EXE)
				message(STATUS "Using ccache: ${CCACHE_PROGRAM_EXE}")
				set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM_EXE}" CACHE STRING "C++ compiler launcher" FORCE)
				set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_PROGRAM_EXE}" CACHE STRING "C compiler launcher" FORCE)
				set(CMAKE_ASM_COMPILER_LAUNCHER "${CCACHE_PROGRAM_EXE}" CACHE STRING "ASM compiler launcher" FORCE)
		endif()

		if(LLVM_RANLIB_EXE)
				message(STATUS "Using LLVM RANLIB: ${LLVM_RANLIB_EXE}")
				set(CMAKE_RANLIB "${LLVM_RANLIB_EXE}" CACHE FILEPATH "Path to ranlib" FORCE)
		endif()

		if(LLVM_AR_EXE)
				message(STATUS "Using LLVM AR: ${LLVM_AR_EXE}")
				set(CMAKE_AR "${LLVM_AR_EXE}" CACHE FILEPATH "Path to ar" FORCE)
				set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> --thin rcs <TARGET> <LINK_FLAGS> <OBJECTS>" CACHE STRING "Archiver command" FORCE)
				set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> --thin rcs <TARGET> <LINK_FLAGS> <OBJECTS>" CACHE STRING "Archiver command" FORCE)
				set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> --thin rcs <TARGET> <LINK_FLAGS> <OBJECTS>" CACHE STRING "Archiver command" FORCE)
				set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> --thin rcs <TARGET> <LINK_FLAGS> <OBJECTS>" CACHE STRING "Archiver command" FORCE)
		endif()

		if(SETUP_LINKER_EXE)
				message(STATUS "Using linker: ${SETUP_LINKER_EXE}")
				set(CMAKE_LINKER "${SETUP_LINKER_EXE}" CACHE FILEPATH "Path to linker" FORCE)
				if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
					set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU" CACHE STRING "C++ compiler frontend variant" FORCE)
				elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
					set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "Clang" CACHE STRING "C++ compiler frontend variant" FORCE)
				endif()

				get_filename_component(LINKER_NAME "${SETUP_LINKER_EXE}" NAME)

				if(NOT CMAKE_EXE_LINKER_FLAGS MATCHES "-fuse-ld=")
					set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}" CACHE STRING "Linker flags" FORCE)
				endif()
				if(NOT CMAKE_SHARED_LINKER_FLAGS MATCHES "-fuse-ld=")
					set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}" CACHE STRING "Shared Linker flags" FORCE)
				endif()
				if(NOT CMAKE_MODULE_LINKER_FLAGS MATCHES "-fuse-ld=")
					set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}" CACHE STRING "Module Linker flags" FORCE)
				endif()
		endif()

		MESSAGE(STATUS "Linker flags: ${CMAKE_EXE_LINKER_FLAGS}")
		MESSAGE(STATUS "Shared Linker flags: ${CMAKE_SHARED_LINKER_FLAGS}")
		MESSAGE(STATUS "Module Linker flags: ${CMAKE_MODULE_LINKER_FLAGS}")
endfunction()